% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/md5_check.R
\name{md5_check}
\alias{md5_check}
\title{Check md5 checksums}
\usage{
md5_check(file_paths, original_md5, column_to_join_by)
}
\arguments{
\item{file_paths}{a \code{data.frame} or \link[tibble:tbl_df-class]{tibble} object
with the following two columns:
\itemize{
\item \code{file_path}: full file path for files for which md5s should be
generated
\item \code{file_name}: file name, which should match the file name in the
\code{original_md5} dataframe.
}}

\item{original_md5}{a \code{data.frame} or \link[tibble:tbl_df-class]{tibble} object,
with md5 checksums from the original files. Should include two columns:
\itemize{
\item \code{file_name}: file name
\item \code{original_md5}: md5 checksum
}}

\item{column_to_join_by}{\code{character()} vector, indicating the name of the
column in the dataframe supplied to the argument \code{original_md5}, which
will be used to join original and transfer md5 dataframes.}
}
\value{
a \link[tibble:tbl_df-class]{tibble} object with the following columns:
\itemize{
\item \code{file_path}: full file path for files for which md5s were generated
\item \code{file_name}: file name
\item \code{original_md5}: original md5 checksum
\item \code{new_md5}: generated md5 checksum
\item \code{same_md5}: contains values TRUE/FALSE; FALSE if md5
checksums do not match, and TRUE if they match.
}
}
\description{
This function allows users to (i) generate md5 checksums on
files that have been copied/download/transferred and (ii) check that these
match with md5 checksums generated on the original files.
}
\examples{
file_path <-
    system.file(
        "testdata",
        package = "rutils",
        mustWork = TRUE
    )

original_md5 <-
    readr::read_delim(
        file.path(file_path, "md5_test_data.txt"),
        delim = "\t"
    )

file_paths <-
    tibble::tibble(
        file_path =
            list.files(
                file_path,
                pattern = "over.chain",
                full.names = TRUE
            )
    ) \%>\%
    dplyr::mutate(
        file_name = basename(file_path)
    )

md5_df <-
    md5_check(
        file_paths = file_paths,
        original_md5 = original_md5,
        column_to_join_by = "file_name"
    )

md5_df

print("All check sums match between files?")

all(md5_df$same_md5)
}
